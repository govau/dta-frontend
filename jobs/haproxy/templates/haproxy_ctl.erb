#!/bin/bash

set -eu

# By default, a glob pattern like *.cfg gets passed literally if it doesn't match anything.
# With nullglob, it expands to an empty list, which simplifies the invocation of haproxy.
shopt -s nullglob

RUN_DIR=/var/vcap/sys/run/haproxy
LOG_DIR=/var/vcap/sys/log/haproxy
JOB_DIR=/var/vcap/jobs/haproxy
PID_FILE=${RUN_DIR}/pid
HAPROXY=/var/vcap/packages/haproxy/bin/haproxy
CONFIG_DIR="${JOB_DIR}/config/"

# These can be used inside the HAProxy configs
export HAPROXY_FILES_DIR="${CONFIG_DIR}"
export HAPROXY_CERTS_DIR="${CONFIG_DIR}/certs"  # TODO: bad idea.  Get rid of this variable.
export HAPROXY_HTTP_BIND_HOST='<%= p("http_bind_host") %>'
export HAPROXY_HTTP_BIND_PORT='<%= p("http_bind_port") %>'
export HAPROXY_ACME_ADDRESS='<%= p("acme_address") %>'

<% p('env').each do |key, value| %>
export <%= key %>='<%= value %>'
<% end %>

function wait_for_finish {
  while read PID
  do
    # Trick for waiting for an arbitrary process to finish
    tail -f --pid "${PID}" /dev/null
  done < "${PID_FILE}"
}

case $1 in

  start)
    mkdir -p "${RUN_DIR}" "${LOG_DIR}"
    chown -R vcap:vcap "${RUN_DIR}" "${LOG_DIR}"

    echo $$ > "${PID_FILE}"

    exec "${HAPROXY}" -f "${JOB_DIR}/global_haproxy.cfg" -p "${PID_FILE}" -- "${CONFIG_DIR}"/haproxy.d/*.cfg
    ;;

  stop)
    xargs kill -SIGUSR1 < "${PID_FILE}"
    wait_for_finish
    rm -f "${PID_FILE}"
    ;;

  hard-stop)
    # Normally this will be run by monit after BOSH has run the drain script, so we can't assume haproxy is running.
    if [[ -f "${PID_FILE}" ]]
    then
      # haproxy interprets SIGUSR1 as a "graceful stop" signal
      xargs kill -SIGUSR1 < "${PID_FILE}"
      sleep 3
      xargs kill < "${PID_FILE}" || true
      wait_for_finish
      rm -f "${PID_FILE}"
    fi
    ;;

  reload)
    "${HAPROXY}" -D -f "${JOB_DIR}/global_haproxy.cfg" -p "${PID_FILE}" -sf $(<"${PID_FILE}") -- "${CONFIG_DIR}"/haproxy.d/*.cfg
    ;;

  test)
    "${HAPROXY}" -c -f "${JOB_DIR}/global_haproxy.cfg" -- "${CONFIG_DIR}"/haproxy.d/*.cfg
    ;;

  is_running)
    [[ -f "${PID_FILE}" ]]
    ps "$(<${PID_FILE})" > /dev/null
    ;;

  *)
    echo "Usage: haproxy_ctl {start|stop|drain|reload|test|is_running}"
    ;;

esac
